# snippet <short> [<desciption> [<options>]]
# Options: A - UltiSnips#Anon(value, ...) Automatic expand

snippet sign "Signature"
Yours sincerely,

Andrew Wang
endsnippet

snippet date "Date"
`date +%F`
endsnippet

snippet box "Box"
`!p snip.rv = '┌' + '─' * (len(t[1]) + 2) + '┐'`
│ $1 │
`!p snip.rv = '└' + '─' * (len(t[1]) + 2) + '┘'`
$0
endsnippet

#snippet beg "begin{} / end{}" bA
# b expand only at beginning of line
# A auto expand
snippet be "begin{} / end{}" b
\begin{$1}
	$0
\end{$1}
endsnippet

# w expand only if by itself (helloml "wrong" hello ml "right")
#snippet il "InLine math" wA
snippet il "InLine math" w
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

#snippet ml "MultiLine math" wA
snippet ml "MultiLine math" w
\[
$1
.\] $0
endsnippet

# i inline ?
snippet sp "SuPerscript" i
^{$1}$0
endsnippet

snippet sb "SuBscript" i
_{$1}$0
endsnippet

snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction (with one value filled in)" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

snippet / "Highlight then turn into faction" iA
\\frac{${VISUAL}}{$1}$0
endsnippet

priority 1000
snippet '^.*\)/' "Fractions with many brackets" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

priority 1000
snippet math "mathematica block" w
math $1 math$0
endsnippet

# mathematica can be used to evaulate things (ex 1+1=2 or Simplify(x^2+x+1) or Solve[x^2 + a x + 1 == 0, x])
priority 10000
snippet 'math(.*)math' "evaluate mathematica" wr
`!p
import subprocess
code = 'ToString[' + match.group(1) + ', TeXForm]'
snip.rv = subprocess.check_output(['wolframscript', '-code', code])
`
endsnippet

priority 10
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

# zbar -> \overline{z}
priority 100
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

# phat -> \hat{p}
priority 100
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

# v,. or v., -> \vec{v}
snippet "(\\?\w+)(,\.|\.,)" "Vector postfix" riA
\vec{`!p snip.rv=match.group(1)`}
endsnippet


# not sure what you need superscript/subscript shortcuts for
## a1 to a_1 and a_12 to a_{12}
#snippet '([A-Za-z])(\d)' "auto subscript" wrA
#`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
#endsnippet
#
#snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
#`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
#endsnippet
#
#snippet sr "^2" iA
#^2
#endsnippet
#
#snippet cb "^3" iA
#^3
#endsnippet
#
#snippet compl "complement" iA
#^{c}
#endsnippet
#
#snippet td "superscript" iA
#^{$1}$0
#endsnippet

